// PDF export utility using jsPDF and html2canvas
export async function exportToPDF(elementId: string, filename = "itinerary.pdf", formData?: any) {
  try {
    // Dynamic import to avoid SSR issues
    const [{ default: jsPDF }, { default: html2canvas }] = await Promise.all([import("jspdf"), import("html2canvas")])

    const element = document.getElementById(elementId)
    if (!element) {
      throw new Error("Element not found for PDF export")
    }

    // Create a clone of the element to modify for PDF
    const clone = element.cloneNode(true) as HTMLElement
    clone.style.width = "800px"
    clone.style.backgroundColor = "white"
    clone.style.color = "black"
    clone.style.padding = "20px"

    // Temporarily add to DOM for rendering
    clone.style.position = "absolute"
    clone.style.left = "-9999px"
    clone.style.top = "0"
    document.body.appendChild(clone)

    // Generate canvas from the cloned element
    const canvas = await html2canvas(clone, {
      scale: 2,
      useCORS: true,
      backgroundColor: "#ffffff",
      logging: false,
    })

    // Remove the clone
    document.body.removeChild(clone)

    // Create PDF
    const imgData = canvas.toDataURL("image/png")
    const pdf = new jsPDF("p", "mm", "a4")

    // Add header with trip details
    if (formData) {
      pdf.setFontSize(20)
      pdf.setTextColor(40, 40, 40)
      pdf.text(`Trip to ${formData.destination}`, 20, 20)

      pdf.setFontSize(12)
      pdf.setTextColor(100, 100, 100)
      pdf.text(`${formData.startDate} to ${formData.endDate}`, 20, 30)
      pdf.text(`Budget: ${formData.budget} ${formData.currency} | Style: ${formData.travelStyle}`, 20, 38)

      if (formData.interests && formData.interests.length > 0) {
        pdf.text(`Interests: ${formData.interests.join(", ")}`, 20, 46)
      }

      // Add separator line
      pdf.setDrawColor(200, 200, 200)
      pdf.line(20, 52, 190, 52)
    }

    // Calculate image dimensions to fit page
    const pdfWidth = pdf.internal.pageSize.getWidth()
    const pdfHeight = pdf.internal.pageSize.getHeight()
    const imgWidth = canvas.width
    const imgHeight = canvas.height

    const ratio = Math.min((pdfWidth - 40) / imgWidth, (pdfHeight - 80) / imgHeight)
    const scaledWidth = imgWidth * ratio
    const scaledHeight = imgHeight * ratio

    // Add the image to PDF
    const startY = formData ? 60 : 20
    pdf.addImage(imgData, "PNG", 20, startY, scaledWidth, scaledHeight)

    // Add footer
    const pageCount = pdf.internal.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i)
      pdf.setFontSize(10)
      pdf.setTextColor(150, 150, 150)
      pdf.text(`Generated by AI Trip Planner - Page ${i} of ${pageCount}`, pdfWidth / 2, pdfHeight - 10, {
        align: "center",
      })
    }

    // Save the PDF
    pdf.save(filename)
    return true
  } catch (error) {
    console.error("Error exporting PDF:", error)
    return false
  }
}

// Alternative text-based PDF export for better formatting
export async function exportTextToPDF(itinerary: string, formData: any, filename = "itinerary.pdf") {
  try {
    const { default: jsPDF } = await import("jspdf")

    const pdf = new jsPDF("p", "mm", "a4")
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    const margin = 20
    const lineHeight = 7
    let yPosition = margin

    // Header
    pdf.setFontSize(24)
    pdf.setTextColor(40, 40, 40)
    pdf.text(`Trip to ${formData.destination}`, margin, yPosition)
    yPosition += 15

    // Trip details
    pdf.setFontSize(12)
    pdf.setTextColor(100, 100, 100)
    pdf.text(`${formData.startDate} to ${formData.endDate}`, margin, yPosition)
    yPosition += lineHeight
    pdf.text(`Budget: ${formData.budget} ${formData.currency} | Style: ${formData.travelStyle}`, margin, yPosition)
    yPosition += lineHeight

    if (formData.interests && formData.interests.length > 0) {
      pdf.text(`Interests: ${formData.interests.join(", ")}`, margin, yPosition)
      yPosition += lineHeight
    }

    yPosition += 10

    // Process itinerary text
    const lines = itinerary.split("\n")
    pdf.setFontSize(11)
    pdf.setTextColor(60, 60, 60)

    for (const line of lines) {
      if (yPosition > pageHeight - 30) {
        pdf.addPage()
        yPosition = margin
      }

      if (line.trim() === "") {
        yPosition += lineHeight / 2
        continue
      }

      // Style different types of lines
      if (line.includes("ðŸ“… Day")) {
        pdf.setFontSize(14)
        pdf.setTextColor(40, 40, 40)
        yPosition += 5
      } else if (line.includes("ðŸŒ…") || line.includes("ðŸŒž") || line.includes("ðŸŒ™")) {
        pdf.setFontSize(11)
        pdf.setTextColor(80, 80, 80)
      } else if (line.includes("ðŸ’¡")) {
        pdf.setFontSize(10)
        pdf.setTextColor(120, 120, 120)
      } else {
        pdf.setFontSize(11)
        pdf.setTextColor(60, 60, 60)
      }

      // Split long lines
      const textLines = pdf.splitTextToSize(line, pageWidth - 2 * margin)
      for (const textLine of textLines) {
        if (yPosition > pageHeight - 30) {
          pdf.addPage()
          yPosition = margin
        }
        pdf.text(textLine, margin, yPosition)
        yPosition += lineHeight
      }
    }

    // Footer
    const pageCount = pdf.internal.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i)
      pdf.setFontSize(10)
      pdf.setTextColor(150, 150, 150)
      pdf.text(`Generated by AI Trip Planner - Page ${i} of ${pageCount}`, pageWidth / 2, pageHeight - 10, {
        align: "center",
      })
    }

    pdf.save(filename)
    return true
  } catch (error) {
    console.error("Error exporting text PDF:", error)
    return false
  }
}
